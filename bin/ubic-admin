#!/usr/bin/env perl
package ubic_admin;

use strict;
use warnings;

# ABSTRACT: ubic administration script

=head1 SYNOPSIS

    ubic-admin setup [--batch-mode]

=cut

use Getopt::Long 2.33;
use Pod::Usage;
use Carp;

use Ubic::Settings;
use Ubic::Settings::ConfigFile;

return 1 if caller();

my $batch_mode;
GetOptions(
    'batch-mode' => \$batch_mode,
) or pod2usage(2);

pod2usage(2) unless @ARGV == 1;
my ($action) = @ARGV;

if ($action eq 'setup') {
    setup();
}
else {
    pod2usage(2);
}

sub print_tty {
    print @_ unless $batch_mode;
}

# stolen from ExtUtils::MakeMaker
sub prompt ($;$) {
    my($mess, $def) = @_;
    Carp::confess("prompt function called without an argument")
        unless defined $mess;

    return $def if $batch_mode;

    my $isa_tty = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT));
    Carp::confess("tty not found") if not $isa_tty;

    my $dispdef = defined $def ? "[$def] " : " ";
    $def = defined $def ? $def : "";

    local $| = 1;
    local $\ = undef;
    print_tty "$mess ";

    my $ans;
    if (not $isa_tty and eof STDIN) {
        print_tty "$def\n";
    }
    else {
        $ans = <STDIN>;
        if( defined $ans ) {
            chomp $ans;
        }
        else { # user hit ctrl-D
            print_tty "\n";
        }
    }

    return (!defined $ans || $ans eq '') ? $def : $ans;
}

sub xsystem {
    local $! = local $? = 0;
    return if system(@_) == 0;

    my @msg;
    if ($!) {
        push @msg, "error ".int($!)." '$!'";
    }
    if ($? > 0) {
        push @msg, "kill by signal ".($? & 127) if ($? & 127);
        push @msg, "core dumped" if ($? & 128);
        push @msg, "exit code ".($? >> 8) if $? >> 8;
    }
    die join ", ", @msg;
}

sub setup {
    if (-d Ubic::Settings->service_dir and -d Ubic::Settings->data_dir) {
        my $go = prompt("Looks like ubic is already configured, do you want to reconfigure? [y/N]", 'n');
        if ($go ne 'y') {
            return;
        }
    }

    print_tty "\nUbic can be installed either in your home dir or into standard system paths (/etc, /var).\n";
    print_tty "You need to be root to install it into system.\n";

    my $is_root = ( $> ? 0 : 1 );
    if ($is_root) {
        my $ok = prompt("You are root, install into system? [Y/n]", 'y');
        unless ($ok eq 'y') {
            return;
        }
    }
    else {
        my $ok = prompt("You are not root, install locally? [Y/n]", 'y');
        unless ($ok eq 'y') {
            return;
        }
    }

    my $home;
    unless ($is_root) {
        $home = $ENV{HOME};
        unless (defined $home) {
            die "Can't find your home!";
        }
        unless (-d $home) {
            die "Can't find your home dir '$home'!";
        }
    }

    print_tty "\nService dir is a directory with descriptions of your services.\n";
    my $default_service_dir = ($is_root ? '/etc/ubic/service' : "$home/ubic/service");
    my $service_dir = prompt("Service dir? [$default_service_dir]", $default_service_dir);

    print_tty "\nData dir is a directory into which ubic stores all of its data: locks, status files, tmp files.\n";
    my $default_data_dir = ($is_root ? '/var/lib/ubic' : "$home/ubic/data");
    my $data_dir = prompt("Data dir? [$default_data_dir]", $default_data_dir);

    # TODO - sanity checks?

    my $default_user;
    if ($is_root) {
        print_tty "\nUbic services can be started from any user.\n";
        print_tty "Some services don't specify the user from which they must be started.\n";
        print_tty "Default user will be used in this case.\n";
        $default_user = prompt("Default user? [root]", 'root');
    }
    else {
        print_tty "\n";
        $default_user = getpwuid($>);
        unless (defined $default_user) {
            die "Can't get login (uid '$>')";
        }
        print_tty "You're using local installation, so default service user will be set to '$default_user'.\n";
    }

    my $enable_1777;
    if ($is_root) {
        print_tty "\nSystem-wide installations need to store service-related data\n";
        print_tty "into data dir for different users. For non-root services to work,\n";
        print_tty "1777 grants for some data dir subdirectories is required.\n";
        print_tty "(1777 grants means that everyone will be able to write to dir,\n";
        print_tty "but only file owners will be able to modify and remove their files.)\n";
        print_tty "There are no known security issues with this approach, but you have\n";
        print_tty "to decide for yourself if that's ok for you.\n";

        $enable_1777 = prompt("Enable 1777 grants for data dir? [Y/n]", 'y');
    }

    my $enable_ubic_ping;
    if ($is_root) {
        print_tty "\n'ubic-ping' is a service provided by ubic out-of-the-box.\n";
        print_tty "It is a HTTP daemon which can report service statuses via simple REST API.\n";
        print_tty "Do you want to install 'ubic-ping' service into service tree?\n";
        print_tty "(You'll always be able to stop it or remove it.)\n";
        my $enable_ubic_ping = prompt("Enable ubic-ping? [Y/n]", 'y');

        if ($enable_ubic_ping) {
            print_tty "NOTE: ubic-ping will be started on port 12345; don't forget to protect it with firewall.\n";
        }
    }
    # TODO - do local users need ubic-ping? we need to allow them to configure its port, then

    my $config_file = ($is_root ? '/etc/ubic/ubic.cfg' : "$home/.ubic.cfg");

    {
        print_tty "\nThat's all I need to know.\n";
        print_tty "If you proceed, all necessary directories will be created,\n";
        print_tty "and configuration file will be stored into $config_file.\n";
        my $run = prompt("Complete setup? [Y/n]", 'y');
        unless ($run) {
            return;
        }
    }

    print "Installing dirs...";

    xsystem('mkdir', '-p', '--', $service_dir);
    xsystem('mkdir', '-p', '--', $data_dir);

    for my $subdir (qw[
        status simple-daemon/pid lock ubic-daemon tmp watchdog/lock watchdog/status
    ]) {
        xsystem('mkdir', '-p', '--', "$data_dir/$subdir");
        xsystem('chmod', '1777', '--', "$data_dir/$subdir") if $enable_1777;
    }

    if ($enable_ubic_ping) {
        print "\nInstalling ubic-ping service...";

        my $file = "$service_dir/ubic-ping";
        open my $fh, '>', $file or die "Can't write to '$file': $!";
        print {$fh} "use Ubic::Ping::Service;\nUbic::Ping::Service->new;\n" or die "Can't write to '$file': $!";
        close $fh or die "Can't close '$file': $!";
    }

    print "\nInstalling $config_file...";
    Ubic::Settings::ConfigFile->write($config_file, {
        service_dir => $service_dir,
        data_dir => $data_dir,
        default_user => $default_user,
    });
    print"\n";

    xsystem('ubic', 'start', 'ubic-ping') if $enable_ubic_ping;
}
