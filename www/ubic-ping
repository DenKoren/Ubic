#!/usr/bin/perl
# Copyright (c) 2009 Yandex.ru

package Ubic::Ping;

use strict;
use warnings;

=head1 NAME

ubic-ping - http server which returns service status by it's name or port

=cut

use Ubic;

use base qw(HTTP::Server::Simple::CGI);

sub print_status($) {
    my ($service) = @_;
    unless (Ubic->is_enabled($service->name)) {
        print "HTTP/1.0 200 OK\r\n\r\n";
        print "disabled\n";
        return;
    }
    my $status = Ubic->cached_status($service->name); # should read status from static file on disk
    if ($status eq 'running') {
        print "HTTP/1.0 200 OK\r\n\r\n";
        print "ok\n";
        return;
    }
    else {
        print "HTTP/1.0 200 OK\r\n\r\n";
        print "$status\n";
        return;
    }
}

sub handle_request {
    my ($self, $cgi) = @_;
    if ($cgi->path_info eq '/ping') {
        # ping self
        print "HTTP/1.0 200 OK\r\n\r\n";
        print "ok\n";
        return;
    }
    elsif (my ($port) = $cgi->path_info =~ m{^/status/port/(\d+)/?$}) {
        # find service my port
        my @services = Ubic->services();
        for (@services) {
            if ($_->port and $_->port == $port) {
                print_status($_);
                return;
            }
        }
        print "HTTP/1.0 404 Not found\r\n\r\n";
        print "Service at port '$port' not found\n";
        return;
    }
    elsif (my ($name) = $cgi->path_info =~ m{^/status/service/(.+?)/?$}) {
        my $service = eval {
            Ubic->service($name);
        }; if ($@) {
            print "HTTP/1.0 404 Not found\r\n\r\n";
            print "Service with name '$name' not found\n";
            return;
        }
        print_status($service);
    }
    else {
        print "HTTP/1.0 404 Not found\r\n\r\n";
        print "Expected /status/name/NAME or /status/port/PORT query\n";
        return;
    }
}

1;

=head1 AUTHOR

Vyacheslav Matjukhin <mmcleric@yandex-team.ru>

=cut
